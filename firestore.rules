rules_version = '2';

// Firestore security rules for AuditSim Pro
// Admins can manage all data. Trainees may only
// access cases they are authorized for and their own submissions.
service cloud.firestore {
  match /databases/{database}/documents {
    // Fetch role for the currently authenticated user
    function getUserRole() {
      return request.auth != null ?
        get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role :
        null;
    }

    function isAdmin() {
      return getUserRole() == 'admin';
    }

    function isTrainee() {
      return getUserRole() == 'trainee';
    }

    // Checks if the trainee is allowed to view a case
    function traineeHasAccessToCase(caseId) {
      let caseDoc = get(/databases/$(database)/documents/artifacts/$(appId)/public/data/cases/$(caseId));
      return caseDoc.exists() && (
        !(caseDoc.data.visibleToUserIds is list) ||
        caseDoc.data.visibleToUserIds.size() == 0 ||
        request.auth.uid in caseDoc.data.visibleToUserIds
      );
    }

    // Role documents store whether a user is an admin or trainee
    match /roles/{userId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == userId || isAdmin());
    }

    // Case documents accessible to trainees if authorized
    match /artifacts/{appId}/public/data/cases/{caseId} {
      allow read: if request.auth != null && (
        isAdmin() ||
        (isTrainee() && traineeHasAccessToCase(caseId))
      );
      allow write: if request.auth != null && isAdmin();
    }

    // Profile information is private to each user
    match /artifacts/{appId}/users/{userId}/userProfileData/profile {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Trainees submit their work under this path
    match /artifacts/{appId}/users/{userId}/caseSubmissions/{caseId} {
      allow read: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      allow write: if request.auth != null && request.auth.uid == userId && isTrainee();
    }


    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
