rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function getUserRole() {
      return request.auth != null ?
        get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role : null;
    }

    function isAuthenticated() {
      return getUserRole() != null;
    }

    // Ensures the appId from the path matches the app_id custom claim in the user's auth token.
    // IMPORTANT: You must set an 'app_id' custom claim on your Firebase Auth users.
    function tenantAppIdMatchesRequest(appIdWildcardFromPath) {
      return request.auth.token.app_id != null && request.auth.token.app_id == appIdWildcardFromPath;
    }

    function currentRequestingUserIsAdmin(appIdWildcard) {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    function currentRequestingUserIsTrainee(appIdWildcard) {
      return isAuthenticated() && getUserRole() == 'trainee';
    }

    function isOwner(userIdFromPath) {
      return isAuthenticated() && request.auth.uid == userIdFromPath;
    }

    // --- Roles ---
    match /roles/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // --- User Profiles ---
    // Path: artifacts/{appIdWildcard}/users/{userId}/userProfileData/profile
    match /artifacts/{appIdWildcard}/users/{userId}/userProfileData/profile {
      // Allow only the user themselves to read their own profile
      allow get: if isAuthenticated() && request.auth.uid == userId;

      // Allow the user to create their own profile with strict initial data checks
      allow create: if isAuthenticated() &&
                       request.auth.uid == userId &&                       // User creating their own profile
                       request.resource.data.uid == userId &&              // uid field must match auth uid
                       request.resource.data.email is string &&            // email must be provided
                       request.resource.data.role in ['admin', 'trainee'] && // role must be valid
                       request.resource.data.createdAt == request.time &&  // createdAt must be server timestamp
                       request.resource.data.lastUpdatedAt == request.time; // lastUpdatedAt must be server timestamp

      // Allow the user to update their own profile, but only specific fields
      allow update: if isAuthenticated() &&
                       request.auth.uid == userId &&                       // User updating their own profile
                       request.resource.data.lastUpdatedAt == request.time && // lastUpdatedAt must be server time
                       request.resource.data.role in ['admin', 'trainee'] && // The new role value must be valid
                       // Ensure only 'role' and 'lastUpdatedAt' are being changed.
                       request.resource.data.diff(resource.data).affectedKeys.hasOnly(['role', 'lastUpdatedAt']) &&
                       // Ensure essential fields are not being altered or deleted
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.createdAt == resource.data.createdAt;

      // Deletion is not permitted (use soft-delete if needed)
      allow delete: if false;
    }

    // Rule for Admin listing users (UIDs and potentially triggering individual profile gets)
    // Path: artifacts/{appIdWildcard}/users
    match /artifacts/{appIdWildcard}/users {
        // Admins can list the user documents (UIDs).
        // WARNING: This allows admins to enumerate all UIDs under this appID.
        // For improved security/scalability for user management, consider a Cloud Function.
        allow list: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                       currentRequestingUserIsAdmin(appIdWildcard);
        // Deny direct read/write/create/delete on the collection itself
        allow get, write, delete, create: if false;
    }


    // --- Cases ---
    // Path: artifacts/{appIdWildcard}/public/data/cases/{caseId}
    match /artifacts/{appIdWildcard}/public/data/cases/{caseId} {
      allow get: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                    ( currentRequestingUserIsAdmin(appIdWildcard) ||
                      ( currentRequestingUserIsTrainee(appIdWildcard) &&
                        resource.data._deleted == false &&
                        (resource.data.visibleToUserIds == null || resource.data.visibleToUserIds.size() == 0 || request.auth.uid in resource.data.visibleToUserIds)
                      )
                    );

      // Listing cases:
      // Only admins may list cases directly. Trainees must retrieve cases via the
      // Cloud Function `getMyVisibleCases`.
      allow list: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                     currentRequestingUserIsAdmin(appIdWildcard);

      allow create: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                       currentRequestingUserIsAdmin(appIdWildcard) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.caseName is string && request.resource.data.caseName.size() > 0 &&
                       request.resource.data.disbursements is list &&
                       request.resource.data.invoiceMappings is list &&
                       request.resource.data.visibleToUserIds is list && // Can be empty, not null
                       request.resource.data._deleted == false; // Must be explicitly false on create

      allow update: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                       currentRequestingUserIsAdmin(appIdWildcard) &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.createdBy == resource.data.createdBy &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.visibleToUserIds is list && // Can be empty, not null
                       request.resource.data._deleted is bool; // Can be true (soft delete) or false

      allow delete: if false; // Admins use soft delete via update
    }

    // --- Case Submissions ---
    // Path: artifacts/{appIdWildcard}/users/{userId}/caseSubmissions/{submissionCaseId}
    match /artifacts/{appIdWildcard}/users/{userId}/caseSubmissions/{submissionCaseId} {
      allow get: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                    (isOwner(userId) || currentRequestingUserIsAdmin(appIdWildcard));

      allow list: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                     (isOwner(userId) || currentRequestingUserIsAdmin(appIdWildcard)); // Admins can list submissions for a user.

      allow create: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                       currentRequestingUserIsTrainee(appIdWildcard) &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.caseId == submissionCaseId &&
                       request.resource.data.submittedAt == request.time &&
                       // classificationsSubmittedAt is conditional
                       ( !('classificationsSubmittedAt' in request.resource.data) || request.resource.data.classificationsSubmittedAt == request.time ) &&
                       request.resource.data.selectedPaymentIds is list &&
                       request.resource.data.retrievedDocuments is list &&
                       request.resource.data.classifications is list; // Even if empty initially

      // Trainees can update their own submissions, but only specific fields (e.g., adding classifications)
      allow update: if isAuthenticated() && tenantAppIdMatchesRequest(appIdWildcard) &&
                       currentRequestingUserIsTrainee(appIdWildcard) &&
                       isOwner(userId) &&
                       request.resource.data.userId == request.auth.uid && // Cannot change owner
                       request.resource.data.caseId == resource.data.caseId && // Cannot change related case
                       request.resource.data.submittedAt == resource.data.submittedAt && // Original submission time immutable
                       // Whitelist fields that can be changed by trainee during this update step
                       request.resource.data.diff(resource.data).affectedKeys.hasOnly([
                         'classifications', 'classificationsSubmittedAt', 'lastUpdatedAt', // Add 'lastUpdatedAt' if you track it
                         'retrievedDocuments', 'selectedPaymentIds' // If these can be modified before final classification
                       ]) &&
                       // If 'lastUpdatedAt' is used, ensure it's a server timestamp
                       ( !('lastUpdatedAt' in request.resource.data) || request.resource.data.lastUpdatedAt == request.time ) &&
                       ( !('classificationsSubmittedAt' in request.resource.data) || request.resource.data.classificationsSubmittedAt == request.time );


      allow delete: if false;
    }
  }
}