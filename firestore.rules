rules_version = '2';

// Firestore security rules for AuditSim Pro
// Admins can manage all data. Trainees may only
// access cases they are authorized for and their own submissions. Roles are now managed via custom claims.
service cloud.firestore {
  match /databases/{database}/documents {
    // Check user role from custom claims
    function getRole() {
      return get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return request.auth != null &&
             (request.auth.token.role == 'admin' || getRole() == 'admin');
    }

    function isTrainee() {
      return request.auth != null &&
             (request.auth.token.role == 'trainee' || getRole() == 'trainee');
    }

    // Checks if the trainee can view the case currently being read
    function traineeCaseAccessible() {
      return (
        !(resource.data.visibleToUserIds is list) ||
        resource.data.visibleToUserIds.size() == 0 ||
        request.auth.uid in resource.data.visibleToUserIds
      );
    }

    // Role documents store whether a user is an admin or trainee
    match /roles/{userId} {
      // Allow users to read their own role document (for display/initial setup)
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow a user to create their own role document with any role.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Role updates should primarily be handled by a trusted backend service (e.g., Cloud Function)
      allow update: if request.auth != null && isAdmin(); // Still allow admin client-side if needed, but custom claims are source of truth
    }

    // Case documents accessible to trainees if authorized
    match /artifacts/{appId}/public/data/cases/{caseId} {
      // For single document reads, the function is secure.
      allow get: if request.auth != null && (
        isAdmin() ||
        (isTrainee() && traineeCaseAccessible())
      );
      // For queries, client must filter by visibleToUserIds to get results.
      allow list: if request.auth != null && (isAdmin() || isTrainee());
      allow write: if request.auth != null && isAdmin();
    }

    // Profile information is private to each user
    match /artifacts/{appId}/users/{userId}/userProfileData/profile {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Trainees submit their work under this path
    match /artifacts/{appId}/users/{userId}/caseSubmissions/{caseId} {
      allow read: if request.auth != null && (isAdmin() || request.auth.uid == userId);
      allow write: if request.auth != null && request.auth.uid == userId && isTrainee();
    }


    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
