rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function getUserRole() {
      return request.auth != null ?
        firestore.get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role : null;
    }

    function isAdmin() {
      return getUserRole() == 'admin';
    }

    function traineeHasAccessToCase(caseId) {
      return firestore.exists(/databases/$(database)/documents/artifacts/$(appId)/cases/$(caseId)/authorizedTrainees/$(request.auth.uid));
    }

    match /artifacts/{appId}/case_documents/{caseId}/{fileName} {
      allow read: if getUserRole() != null &&
                   ( isAdmin() || 
                     (getUserRole() == 'trainee' && traineeHasAccessToCase(caseId))
                   );

      allow write: if getUserRole() != null && isAdmin() &&
                      request.resource.contentType.matches('application/pdf') &&
                      request.resource.size < 5 * 1024 * 1024;
    }
  }
}