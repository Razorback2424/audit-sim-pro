rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // ---------- Role helpers ----------
    // Global roles/{uid} doc
    function hasGlobalAdminRole() {
      return request.auth != null &&
             firestore.exists(
               /databases/(default)/documents/roles/$(request.auth.uid)
             ) &&
             firestore.get(
               /databases/(default)/documents/roles/$(request.auth.uid)
             ).data.role == 'admin';
    }

    function isAdmin(appId) {
      return hasGlobalAdminRole();
    }

    // ---------- Trainee visibility helper ----------
    // artifacts/{appId}/public/data/cases/{caseId} with visibleToUserIds (list)
    function traineeHasAccessToCase(appId, caseId) {
      if (request.auth == null) return false;
      let docPath = /databases/(default)/documents/artifacts/$(appId)/public/data/cases/$(caseId);
      if (!firestore.exists(docPath)) return false;
      let caseData = firestore.get(docPath).data;

      if (caseData.publicVisible == true) {
        return true;
      }

      if (!(caseData.visibleToUserIds is list) || caseData.visibleToUserIds.size() == 0) {
        // Backward compatibility: treat missing publicVisible/Members as public
        return caseData.publicVisible != false;
      }

      return caseData.visibleToUserIds.hasAny([request.auth.uid]);
    }

    // ---------- Case document rules ----------
    // Accept any nested object names under a case
    match /artifacts/{appId}/case_documents/{caseId}/{file=**} {

      // Admin-only writes; PDF only (by MIME or .pdf extension); <= 25 MB
      allow create, update: if isAdmin(appId)
        && request.resource != null
        && (
             request.resource.contentType == 'application/pdf' ||
             (
               request.resource.contentType == 'application/octet-stream' &&
               request.resource.name.matches('(?i).*\\.pdf$') // tolerate generic MIME if name ends with .pdf
             )
           )
        && request.resource.size <= 25 * 1024 * 1024;

      // Reads: admins OR trainees who can see the case
      allow get, list: if isAdmin(appId) || traineeHasAccessToCase(appId, caseId);

      // Deletes: admins only
      allow delete: if isAdmin(appId);
    }
  }
}
